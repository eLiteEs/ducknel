!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASFLAGS	Makefile	/^ASFLAGS = -f elf64$/;"	m
CC	Makefile	/^CC   = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -ffreestanding -O2 -Wall -Wextra -m64 -fno-pic -fno-stack-protector -nostdlib -nostdinc$/;"	m
CONSOLE_H	console.h	2;"	d
KERNEL	Makefile	/^KERNEL = kernel.elf$/;"	m
KEYBOARD_DATA_PORT	keyboard.c	4;"	d	file:
KEYBOARD_H	keyboard.h	2;"	d
LD	Makefile	/^LD   = ld$/;"	m
MAXLEN	console.h	8;"	d
NASM	Makefile	/^NASM = nasm$/;"	m
OBJS	Makefile	/^OBJS = boot.o kernel.o console.o keyboard.o$/;"	m
PIC1_COMMAND	keyboard.c	5;"	d	file:
PIC_EOI	keyboard.c	6;"	d	file:
VGA_ADDRESS	console.h	9;"	d
VGA_HEIGHT	console.h	7;"	d
VGA_WIDTH	console.h	6;"	d
_STDINT_H	stdint.h	2;"	d
_start	boot.asm	/^_start:$/;"	l
color	console.c	/^uint8_t   color      = 0x07;$/;"	v
console_clearScreen	console.c	/^void console_clearScreen() {$/;"	f
console_putChar	console.c	/^void console_putChar(char c) {$/;"	f
console_readLine	console.c	/^char* console_readLine() {$/;"	f
console_scroll	console.c	/^void console_scroll() {$/;"	f
console_setColor	console.c	/^void console_setColor(uint8_t newColor) {$/;"	f
console_updateCursor	console.c	/^void console_updateCursor() {$/;"	f
console_write	console.c	/^void console_write(const char* str) {$/;"	f
cursorPos	console.c	/^uint16_t  cursorPos  = 0;$/;"	v
efault	Makefile	/^	echo 'set default=0'               >> isodir\/boot\/grub\/grub.cfg$/;"	m
extern	boot.asm	/^extern kmain       ; tu funciÃ³n C++ debe declararse: extern "C" void kmain();$/;"	l
gdt_descriptor	boot.asm	/^gdt_descriptor:$/;"	l
gdt_end	boot.asm	/^gdt_end:$/;"	l
gdt_start	boot.asm	/^gdt_start:$/;"	l
getKey	keyboard.c	/^int getKey() {$/;"	f
global	boot.asm	/^global _start$/;"	l
head	keyboard.c	/^static volatile int head = 0;$/;"	v	file:
header_end	boot.asm	/^header_end:$/;"	l
header_start	boot.asm	/^header_start:$/;"	l
imeout	Makefile	/^	echo 'set timeout=0'                > isodir\/boot\/grub\/grub.cfg$/;"	m
inb	keyboard.c	/^static inline uint8_t inb(uint16_t port) {$/;"	f	file:
int16_t	stdint.h	/^typedef signed short       int16_t;$/;"	t
int32_t	stdint.h	/^typedef signed int         int32_t;$/;"	t
int64_t	stdint.h	/^typedef signed long long   int64_t;$/;"	t
int8_t	stdint.h	/^typedef signed char        int8_t;$/;"	t
keyBuffer	keyboard.c	/^static volatile int keyBuffer[256];$/;"	v	file:
keyboard_handler	keyboard.c	/^void keyboard_handler() {$/;"	f
keyboard_install	keyboard.c	/^void keyboard_install() {$/;"	f
kmain	kernel.c	/^void kmain() {$/;"	f
lineBuffer	console.c	/^char      lineBuffer[MAXLEN] = {0};$/;"	v
long_mode_entry	boot.asm	/^long_mode_entry:$/;"	l
outb	keyboard.c	/^static inline void outb(uint16_t port, uint8_t val) {$/;"	f	file:
pd	boot.asm	/^pd:$/;"	l
pdpt	boot.asm	/^pdpt:$/;"	l
pml4	boot.asm	/^pml4:$/;"	l
scancodeToAscii	keyboard.c	/^char scancodeToAscii(uint8_t sc, int shift) {$/;"	f
section	boot.asm	/^section .bss$/;"	l
section	boot.asm	/^section .multiboot2_header$/;"	l
section	boot.asm	/^section .text$/;"	l
stack_bottom	boot.asm	/^stack_bottom:$/;"	l
stack_top	boot.asm	/^stack_top:$/;"	l
tail	keyboard.c	/^static volatile int tail = 0;$/;"	v	file:
uint16_t	stdint.h	/^typedef unsigned short     uint16_t;$/;"	t
uint32_t	stdint.h	/^typedef unsigned int       uint32_t;$/;"	t
uint64_t	stdint.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	stdint.h	/^typedef unsigned char      uint8_t;$/;"	t
vgaBuffer	console.c	/^uint16_t* vgaBuffer  = (uint16_t*)VGA_ADDRESS;$/;"	v
